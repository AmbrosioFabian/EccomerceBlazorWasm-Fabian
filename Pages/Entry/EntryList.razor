@page "/entry"
@using EccomerceBlazorWasm.Interfaces
@using EccomerceBlazorWasm.Models.ViewModel
@inject IEntry _entry
@inject NavigationManager _navigation

<PageTitle>Kardex - Entrada</PageTitle>

<h1 class="text-4xl font-bold">Kardex - entrada</h1>

<p class="text-xl pb-4">Bienvenido al apartado de Kardex - entrada</p>

<div class="w-1/3 ml-auto flex items-center space-x-4 pb-4">
    <div class="flex items-center space-x-2">
        <label for="startDate">Fecha de Inicio:</label>
        <input class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" type="date" id="startDate" @bind="startDate" />
    </div>
    <div class="flex items-center space-x-2">
        <label for="endDate">Fecha de Fin:</label>
        <input class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" type="date" id="endDate" @bind="endDate" />
    </div>
    <div class="flex items-center">
        <button class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" @onclick="ApplyFilter">Filtrar</button>
    </div>
</div>


<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">ID</th>
                <th scope="col" class="px-6 py-3">Fecha</th>
                <th scope="col" class="px-6 py-3">Nombre</th>
                <th scope="col" class="px-6 py-3">Precio Unitario</th>
                <th scope="col" class="px-6 py-3">Cantidad</th>
                <th scope="col" class="px-6 py-3">Total</th>
                <th scope="col" class="px-6 py-3">Existencia</th>
            </tr>
        </thead>
        <tbody>
            @if (entrys == null)
            {
                <tr>
                    <td colspan="7" class="text-center py-4">Cargando...</td>
                </tr>
            }
            else if (entrys.Count == 0)
            {
                <tr>
                    <td colspan="7" class="text-center py-4">No hay productos disponibles.</td>
                </tr>
            }
            else
            {
                @foreach (var entry in entrys)
                {
                    <tr>
                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">@entry.IdEntry</th>
                        <td class="px-6 py-3">@entry.Date</td>
                        <td class="px-6 py-3">@entry.Name</td>
                        <td class="px-6 py-3">@entry.UnitCost</td>
                        <td class="px-6 py-3">@entry.Amount</td>
                        <td class="px-6 py-3">@entry.Total</td>
                        <td class="px-6 py-3">@entry.Existence</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<EntryViewModel>? entrys;
    private DateTime startDate;
    private DateTime endDate;

    protected override async Task OnInitializedAsync()
    {
        entrys = await _entry.GetAllAsync();
    }

    private async Task ApplyFilter()
    {
        entrys = await _entry.FilterByDateAsync(startDate, endDate);
    }
}
