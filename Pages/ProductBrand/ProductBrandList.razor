@layout Layout.MainLayout
@page "/product-brand"
@using EccomerceBlazorWasm.Interfaces
@using EccomerceBlazorWasm.Interfaces.PorductInterface
@using EccomerceBlazorWasm.Models.ViewModel
@inject IProductBrand _productBrand;
@inject IJSRuntime JS
@using System.Text.RegularExpressions;
<AuthorizeView>
    <Authorized>
        <div class="relative bg-white shadow-md dark:bg-gray-800 sm:rounded-lg">
            <div class="flex flex-col items-center justify-between p-4 space-y-3 md:flex-row md:space-y-0 md:space-x-4">
                <div class="w-full md:w-1/2">
                    <form class="flex items-center" @onsubmit="SearchBrands">
                        <label for="simple-search" class="sr-only">Buscar</label>
                        <div class="relative w-full">
                            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <input type="text" id="simple-search" class="block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Buscar" @bind="searchTerm">
                        </div>
                        <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Buscar</button>
                    </form>
                </div>
                <div class="flex flex-col items-stretch justify-end flex-shrink-0 w-full space-y-2 md:w-auto md:flex-row md:space-y-0 md:items-center md:space-x-3">
                    <button type="button" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-white rounded-lg bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800" @onclick="ShowModal">
                        <svg class="h-3.5 w-3.5 mr-2" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" />
                        </svg>
                        Agregar Marca
                    </button>
                </div>
            </div>
        </div>

        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            ID
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Nombre
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <span class="sr-only">Acciones</span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (productBrands == null)
                    {
                        <tr>
                            <td colspan="3" class="text-center py-4">Cargando...</td>
                        </tr>
                    }
                    else if (productBrands.Count == 0)
                    {
                        <tr>
                            <td colspan="3" class="text-center py-4">No hay marcas de productos disponibles.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var brand in productBrands)
                        {
                            <tr>
                                <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">@brand.Id</th>
                                <td class="px-6 py-3">@brand.Name</td>
                                <td class="px-6 py-3 flex items-center justify-end">
                                    <button @onclick="()=>ShowEditModal(brand)" class="rounded-lg block py-2 px-4 hover:bg-yellow-400 dark:hover:bg-yellow-600 dark:hover:text-white">
                                        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 3h4a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h4M12 14v4M8 12h8" />
                                        </svg>
                                    </button>
                                    <button @onclick="()=>ShowDeleteModal(brand)" class="rounded-lg block py-2 px-4 text-sm text-gray-700 hover:bg-red-400 dark:hover:bg-red-600 dark:text-gray-200 dark:hover:text-white">
                                        <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        @if (showModal)
        {
            <!-- Main modal -->
            <div class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-35 flex justify-center items-center z-50">
                <div class="relative p-4 w-full sm:max-w-sm h-full md:h-auto">
                    <!-- Modal content -->
                    <div class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
                        <!-- Modal header -->
                        <div class="flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                Agregar Marca
                            </h3>
                            <button @onclick="HideModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                                <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                </svg>
                                <span class="sr-only">Close modal</span>
                            </button>
                        </div>
                        <!-- Modal body -->
                        <form @onsubmit="AddBrand">
                            <div class="grid gap-4 mb-4 sm:grid-cols-2">
                                <div class="col-span-2">
                                    <label for="brandName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nombre</label>
                                    <input @bind="newBrandName" type="text" id="brandName" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Escriba el nombre de la marca" oninput="validarLetras(this)">
                                    <script>
                                        function validarLetras(input) {
                                            input.value = input.value.replace(/[^a-zA-Z\s]/g, ''); // Permite letras y espacios
                                        }
                                    </script>
                                    <!-- Contenedor para el mensaje de error -->
                                    <div class="mt-2 h-6">
                                        <div class="text-red-600 rounded-lg overflow-hidden transition-all duration-300 @(!string.IsNullOrEmpty(errorMessage) ? "block" : "hidden") text-xs">
                                            @errorMessage
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                <svg class="mr-1 -ml-1 w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
                                </svg>
                                Agregar
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }

        @if (_showModalEdit)
        {
            <!-- Main modal -->
            <div class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-35 flex justify-center items-center z-50">
                <div class="relative p-4 w-full sm:max-w-sm h-full md:h-auto">
                    <div class="relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
                        <!-- Modal content -->
                        <div class="flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                Editar Marca
                            </h3>
                            <button @onclick="HideModalEdit" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                                <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                </svg>
                                <span class="sr-only">Close modal</span>
                            </button>
                        </div>
                        <form @onsubmit="EditBrand">
                            <div class="grid gap-4 mb-4 sm:grid-cols-2">
                                <div class="col-span-2">
                                    <label for="editBrandName" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nombre</label>
                                    <input @bind="tempBrandName" type="text" id="editBrandName" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Escriba el nombre de la marca" oninput="validarLetras(this)">
                                    <script>
                                        function validarLetras(input) {
                                            input.value = input.value.replace(/[^a-zA-Z\s]/g, ''); // Permite letras y espacios
                                        }
                                    </script>
                                    <div class="mt-2 h-6">
                                        <div class="text-red-600 rounded-lg overflow-hidden transition-all duration-300 @(!string.IsNullOrEmpty(errorMessage) ? "block" : "hidden") text-xs">
                                            @errorMessage
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                <svg class="mr-1 -ml-1 w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
                                </svg>
                                Guardar Cambios
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        }

        <!-- Modal para eliminar una marca -->
        @if (_showModalDelete)
        {
            <div class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-35 flex justify-center items-center z-50">
                <div class="relative p-4 w-full sm:max-w-md h-full md:h-auto">
                    <!-- Modal content -->
                    <div class="relative p-4 text-center bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
                        <button type="button" @onclick="HideDeleteModal" class="text-gray-400 absolute top-2.5 right-2.5 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                            <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="sr-only">Cerrar modal</span>
                        </button>
                        <svg class="text-gray-400 dark:text-gray-500 w-11 h-11 mb-3.5 mx-auto" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        <p class="mb-4 text-gray-500 dark:text-gray-300">¿Estás seguro de que deseas eliminar esta marca?</p>
                        <div class="flex justify-center items-center space-x-4">
                            <button type="button" @onclick="HideDeleteModal" class="py-2 px-3 text-sm font-medium text-gray-500 bg-white rounded-lg border border-gray-200 hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-primary-300 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">
                                No, cancelar
                            </button>
                            <button type="button" @onclick="DeleteBrand" class="py-2 px-3 text-sm font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-900">
                                Sí, estoy seguro
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<ProductBrandViewModel>? productBrands;
    private string searchTerm = string.Empty;

    private bool showModal = false;
    private bool _showModalEdit = false;
    private bool _showModalDelete = false;

    private string newBrandName = string.Empty;
    private string tempBrandName = string.Empty; // Campo temporal para almacenar el nombre de la marca editada
    private string errorMessage = string.Empty; // Mensaje de error para mostrar en el modal
    private ProductBrandViewModel selectedBrand; // Define el objeto seleccionado para la edición

    protected override async Task OnInitializedAsync()
    {
        await SearchBrands();
    }

    private async Task SearchBrands()
    {
        productBrands = await _productBrand.SearchAsync(searchTerm);
    }

    private async Task AddBrand()
    {
        if (!string.IsNullOrWhiteSpace(newBrandName))
        {
            // Regex para verificar si el nombre de la marca contiene solo letras y espacios
            Regex validBrandNameRegex = new Regex(@"^[a-zA-Z\s]+$");

            if (validBrandNameRegex.IsMatch(newBrandName))
            {
                var newBrand = new ProductBrandViewModel
                    {
                        Name = newBrandName
                    };

                var result = await _productBrand.CreateAsync(newBrand);

                if (result != null)
                {
                    HideModal();
                    await SearchBrands();
                    newBrandName = string.Empty; // Limpiar el campo del nombre de la nueva marca después de agregarla
                }
                else
                {
                    errorMessage = "Error al crear la marca."; // Actualizar el mensaje de error
                }
            }
            else
            {
                errorMessage = "Solo puede contener letras y espacios."; // Actualizar el mensaje de error
            }
        }
        else
        {
            errorMessage = "El nombre no puede estar vacío.";
        }
    }

    private void ShowModal()
    {
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        newBrandName = string.Empty;
        errorMessage = "";
    }

    private void HideModalEdit()
    {
        _showModalEdit = false;
        tempBrandName = string.Empty;
        errorMessage = string.Empty;
    }

    private void HideDeleteModal()
    {
        _showModalDelete = false;
    }

    private void ShowDeleteModal(ProductBrandViewModel brand)
    {
        selectedBrand = brand;
        _showModalDelete = true;
    }

    private void ShowEditModal(ProductBrandViewModel brand)
    {
        selectedBrand = brand;
        tempBrandName = selectedBrand.Name;
        _showModalEdit = true;
        errorMessage = string.Empty;
    }

    private async Task EditBrand()
    {
        errorMessage = string.Empty;
        if (selectedBrand != null && !string.IsNullOrWhiteSpace(tempBrandName))
        {
            Regex validBrandNameRegex = new Regex(@"^[a-zA-Z\s]+$");

            if (validBrandNameRegex.IsMatch(tempBrandName))
            {
                selectedBrand.Name = tempBrandName; // Aplicar el nombre temporal a la marca
                var result = await _productBrand.UpdateAsync(selectedBrand.Id, selectedBrand);

                if (result)
                {
                    await SearchBrands();
                }
                else
                {
                    errorMessage = "Error al editar la marca.";
                }

                HideModalEdit();
            }
            else
            {
                errorMessage = "Solo puede contener letras y espacios.";
            }
        }
        else
        {
            errorMessage = "El nombre no puede estar vacío.";
        }
    }

    private async Task DeleteBrand()
    {
        _showModalDelete = false;
        productBrands?.Remove(selectedBrand);

        var result = await _productBrand.DeleteAsync(selectedBrand.Id);

        if (result)
        {
            await SearchBrands();
        }
        else
        {
            errorMessage = "Error al eliminar la marca.";
        }
    }
}
