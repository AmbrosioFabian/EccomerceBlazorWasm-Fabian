@layout Layout.MainLayout
@page "/product/{page:int}/{pageSize:int}/{searchTerm?}"
@using EccomerceBlazorWasm.Interfaces
@using EccomerceBlazorWasm.Interfaces.PorductInterface
@using EccomerceBlazorWasm.Models
@using EccomerceBlazorWasm.Models.CreateModel
@using EccomerceBlazorWasm.Models.ViewModel
@inject IProduct _product
@inject NavigationManager _navigation
@inject IJSRuntime jsRuntime

<div class="relative bg-white shadow-md dark:bg-gray-800 sm:rounded-lg">
    <div class="flex flex-col items-center justify-between p-4 space-y-3 md:flex-row md:space-y-0 md:space-x-4">
        <div class="w-full md:w-1/2">
            <form class="flex items-center" @onsubmit="SearchProducts">
                <label for="simple-search" class="sr-only">Buscar</label>
                <div class="relative w-full">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <svg aria-hidden="true" class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <input @bind="searchTerm" type="text" id="simple-search" class="block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Buscar">
                </div>
                <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Buscar</button>
            </form>
        </div>
        <div class="flex flex-col items-stretch justify-end flex-shrink-0 w-full space-y-2 md:w-auto md:flex-row md:space-y-0 md:items-center md:space-x-3">
            <button @onclick="CreateProduct" type="button" class="flex items-center justify-center px-4 py-2 text-sm font-medium text-white rounded-lg bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
                <svg class="h-3.5 w-3.5 mr-2" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path clip-rule="evenodd" fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" />
                </svg>
                Agregar Producto
            </button>
        </div>
    </div>
</div>

<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">
                    ID
                </th>
                <th scope="col" class="px-6 py-3">
                    Nombre
                </th>     
                <th scope="col" class="px-6 py-3">
                    Marca
                </th>
                <th scope="col" class="px-6 py-3">
                    Categoría
                </th>
                <th scope="col" class="px-6 py-3">
                    Existencia
                </th>
                <th scope="col" class="px-6 py-3">
                    Costo
                </th>
                <th scope="col" class="px-6 py-3">
                    Precio
                </th>
                <th scope="col" class="px-6 py-3">
                    Estado
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <span class="sr-only">Acciones</span>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (products == null)
            {
                <tr>
                    <td colspan="7" class="text-center py-4">Cargando...</td>
                </tr>
            }
            else if (pagedResponse.TotalPages == 0)
            {
                <tr>
                    <td colspan="7" class="text-center py-4">No hay productos disponibles.</td>
                </tr>
            }
            else
            {
                @foreach (var product in products)
                {
                    <tr>
                        <th scope="row" class="px-4 py-3 font-medium text-gray-900 whitespace-nowrap dark:text-white">@product.Id</th>
                        <td class="px-6 py-3">@product.Name</td>
                        <td class="px-6 py-3">@product.BrandName</td>
                        <td class="px-6 py-3">@product.CategoryName</td>
                        <td class="px-6 py-3">@product.Existence</td>
                        <td class="px-6 py-3">@product.Cost</td>
                        <td class="px-6 py-3">@product.Price</td>
                        <td class="px-6 py-3">@product.StateName</td>
                        <td class="px-6 py-3 flex items-center justify-end">
                            <button @onclick=" () => EditProduct(product.Id)" class="rounded-lg block py-2 px-4 hover:bg-yellow-400 dark:hover:bg-yellow-600 dark:hover:text-white">
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 3h4a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h4M12 14v4M8 12h8" />
                                </svg>
                            </button>
                            <button @onclick="()=>ShowDeleteModal(product)" class="rounded-lg block py-2 px-4 text-sm text-gray-700 hover:bg-red-400 dark:hover:bg-red-600 dark:text-gray-200 dark:hover:text-white">
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 7h14m-9 3v8m4-8v8M10 3h4a1 1 0 0 1 1 1v3H9V4a1 1 0 0 1 1-1ZM6 7h12v13a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7Z" />
                                </svg>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <nav class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
        <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
            Mostrando
            <span class="font-semibold text-gray-900 dark:text-white">@((pageSize * (page - 1) + 1)) - @(Math.Min(pageSize * page, pagedResponse.TotalItems))</span>
            de
            <span class="font-semibold text-gray-900 dark:text-white">@pagedResponse.TotalItems</span>
        </span>
        <ul class="inline-flex items-stretch -space-x-px">
            <li>
                <button @onclick="PreviousPage"  class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                    <span class="sr-only">Previous</span>
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                </button>
            </li>
            @for (int i = 1; i <= pagedResponse.TotalPages; i++)
            {
                if (i <= 4 || (i == pagedResponse.TotalPages || i == pagedResponse.TotalPages - 1 || i == pagedResponse.TotalPages - 2))
                {
                    var pageNumber = i; // Toma temporalmente el valor de "i"
                    <li>
                        <button @onclick="() => GoToPage(pageNumber)" class="flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">@pageNumber</button>
                    </li>
                }
                else if (i == 5)
                {
                    <li>
                        <button class="boton flex items-center justify-center text-sm py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">...</button>
                    </li>
                }
            }
            <li>
                <button @onclick="NextPage"  class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                    <span class="sr-only">Next</span>
                    <svg class="w-5 h-5" aria-hidden="true" fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                </button>
            </li>
        </ul>
    </nav>
</div>

<!-- Modal para eliminar un producto -->
@if (_showModalDelete)
{
    <div class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-35 flex justify-center items-center z-50">
        <div class="relative p-4 w-full sm:max-w-md h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative p-4 text-center bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5">
                <button type="button" @onclick="HideDeleteModal" class="text-gray-400 absolute top-2.5 right-2.5 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Cerrar modal</span>
                </button>
                <svg class="text-gray-400 dark:text-gray-500 w-11 h-11 mb-3.5 mx-auto" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
                <p class="mb-4 text-gray-500 dark:text-gray-300">¿Estás seguro de que deseas desactivar el producto: @selectedProduct.Name?</p>
                <div class="flex justify-center items-center space-x-4">
                    <button type="button" @onclick="HideDeleteModal" class="py-2 px-3 text-sm font-medium text-gray-500 bg-white rounded-lg border border-gray-200 hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-primary-300 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">
                        No, cancelar
                    </button>
                    <button type="button" @onclick="ChangeState" class="py-2 px-3 text-sm font-medium text-center text-white bg-red-600 rounded-lg hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-900">
                        Sí, estoy seguro
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResponseModel<List<ProductViewModel>> pagedResponse = new PagedResponseModel<List<ProductViewModel>>();
    [Parameter] public int page { get; set; } = 1;
    [Parameter] public int pageSize { get; set; } = 10;
    [Parameter] public string searchTerm { get; set; } = string.Empty;

    private List<ProductViewModel>? products;
    private bool _showModalDelete = false;
    private ProductViewModel selectedProduct = new ProductViewModel();

    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    public async Task GoToPage(int pageNumber)
    {
        page = pageNumber;
        await LoadProducts();
        UpdateUrl();
    }

    private async Task LoadProducts()
    {
        pagedResponse = await _product.GetPagedProducts(page, pageSize, searchTerm);
        products = pagedResponse.Items;
    }

    private async Task SearchProducts()
    {
        page = 1; // Vuelve a la primera pagina
        await LoadProducts();
        UpdateUrl();

    }

    private async Task PreviousPage()
    {
        if (page > 1)
        {
            page--;
            await LoadProducts();
            UpdateUrl();
        }
    }

    private async Task NextPage()
    {
        if (page < pagedResponse.TotalPages)
        {
            page++;
            await LoadProducts();
            UpdateUrl();
        }
    }

    private void UpdateUrl()
    {
        var uri = $"/product/{page}/{pageSize}/{searchTerm}";
         _navigation.NavigateTo(uri);
    }

    private void CreateProduct()
    {
        _navigation.NavigateTo($"/product/create");
    }

    private void EditProduct(int id)
    {
        _navigation.NavigateTo($"/product/edit/{id}");
    }

    private void HideDeleteModal()
    {
        _showModalDelete = false;
    }


    private void ShowDeleteModal(ProductViewModel product)
    {
        selectedProduct = product;
        _showModalDelete = true;
    }

    private async Task ChangeState()
    {
        _showModalDelete = false;

        //products?.Remove(selectedProduct); //Eliminar de la fila de manera local, mientras la eliminacion se hace en segundo plano

        var result = await _product.ChangeStateAsync(selectedProduct.Id);

        if (result)
        {
            await SearchProducts(); // Actualiza la lista de categorías después de eliminar

        }
        else
        {

        }
    }
}